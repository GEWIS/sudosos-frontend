@use 'sass:color';
@use 'sass:list';
@use '../themes/sudosos-light/variables_light';

@mixin icon-override($icon) {
  &:before {
    content: $icon;
  }
}

@mixin focused() {
  outline: variables_light.$focusOutline;
  outline-offset: variables_light.$focusOutlineOffset;
  box-shadow: variables_light.$focusShadow;
}

@mixin focused-inset() {
  outline: variables_light.$focusOutline;
  outline-offset: -1 * variables_light.$focusOutlineOffset;
  box-shadow: inset variables_light.$focusShadow;
}

@mixin focused-input() {
  outline: variables_light.$focusOutline;
  outline-offset: variables_light.$inputFocusOutlineOffset;
  box-shadow: variables_light.$focusShadow;
  border-color: variables_light.$inputFocusBorderColor;
}

@mixin focused-listitem() {
  outline: variables_light.$focusOutline;
  outline-offset: variables_light.$focusOutlineOffset;
  box-shadow: variables_light.$inputListItemFocusShadow;
}

@mixin invalid-input() {
  border-color: variables_light.$inputErrorBorderColor;
}

@mixin menuitem {
  margin: variables_light.$inputListItemMargin;

  &:first-child {
    margin-top: 0;
  }

  &:last-child {
    margin-bottom: 0;
  }

  > .p-menuitem-content {
    color: variables_light.$menuitemTextColor;
    transition: variables_light.$listItemTransition;
    border-radius: variables_light.$menuitemBorderRadius;

    .p-menuitem-link {
      color: variables_light.$menuitemTextColor;
      padding: variables_light.$menuitemPadding;
      user-select: none;

      .p-menuitem-text {
        color: variables_light.$menuitemTextColor;
      }

      .p-menuitem-icon {
        color: variables_light.$menuitemIconColor;
        margin-right: variables_light.$inlineSpacing;
      }

      .p-submenu-icon {
        color: variables_light.$menuitemIconColor;
      }
    }
  }

  &.p-highlight {
    > .p-menuitem-content {
      color: variables_light.$menuitemTextActiveColor;
      background: variables_light.$menuitemActiveBg;

      .p-menuitem-link {
        .p-menuitem-text {
          color: variables_light.$menuitemTextActiveColor;
        }

        .p-menuitem-icon,
        .p-submenu-icon {
          color: variables_light.$menuitemIconActiveColor;
        }
      }
    }

    &.p-focus {
      > .p-menuitem-content {
        background: variables_light.$menuitemActiveFocusBg;
      }
    }
  }

  &:not(.p-highlight):not(.p-disabled) {
    &.p-focus {
      > .p-menuitem-content {
        color: variables_light.$menuitemTextHoverColor;
        background: variables_light.$menuitemHoverBg;

        .p-menuitem-link {
          .p-menuitem-text {
            color: variables_light.$menuitemTextHoverColor;
          }

          .p-menuitem-icon,
          .p-submenu-icon {
            color: variables_light.$menuitemTextHoverColor;
          }
        }

        &:hover {
          color: variables_light.$menuitemTextHoverColor;
          background: variables_light.$menuitemHoverBg;

          .p-menuitem-link {
            .p-menuitem-text {
              color: variables_light.$menuitemTextHoverColor;
            }

            .p-menuitem-icon,
            .p-submenu-icon {
              color: variables_light.$menuitemIconHoverColor;
            }
          }
        }
      }
    }

    > .p-menuitem-content {
      &:hover {
        color: variables_light.$menuitemTextHoverColor;
        background: variables_light.$menuitemHoverBg;

        .p-menuitem-link {
          .p-menuitem-text {
            color: variables_light.$menuitemTextHoverColor;
          }

          .p-menuitem-icon,
          .p-submenu-icon {
            color: variables_light.$menuitemIconHoverColor;
          }
        }
      }
    }
  }
}

@mixin horizontal-rootmenuitem {
  > .p-menuitem-content {
    color: variables_light.$horizontalMenuRootMenuitemTextColor;
    transition: variables_light.$listItemTransition;
    border-radius: variables_light.$horizontalMenuRootMenuitemBorderRadius;

    .p-menuitem-link {
      padding: variables_light.$horizontalMenuRootMenuitemPadding;
      user-select: none;

      .p-menuitem-text {
        color: variables_light.$horizontalMenuRootMenuitemTextColor;
      }

      .p-menuitem-icon {
        color: variables_light.$horizontalMenuRootMenuitemIconColor;
        margin-right: variables_light.$inlineSpacing;
      }

      .p-submenu-icon {
        color: variables_light.$horizontalMenuRootMenuitemIconColor;
        margin-left: variables_light.$inlineSpacing;
      }
    }
  }

  &:not(.p-highlight):not(.p-disabled) {
    > .p-menuitem-content {
      &:hover {
        color: variables_light.$horizontalMenuRootMenuitemTextHoverColor;
        background: variables_light.$horizontalMenuRootMenuitemHoverBg;

        .p-menuitem-link {
          .p-menuitem-text {
            color: variables_light.$horizontalMenuRootMenuitemTextHoverColor;
          }

          .p-menuitem-icon,
          .p-submenu-icon {
            color: variables_light.$horizontalMenuRootMenuitemIconHoverColor;
          }
        }
      }
    }
  }
}

@mixin placeholder {
  ::-webkit-input-placeholder {
    @content;
  }
  :-moz-placeholder {
    @content;
  }
  ::-moz-placeholder {
    @content;
  }
  :-ms-input-placeholder {
    @content;
  }
}

@mixin scaledPadding($val, $scale) {
  padding: list.nth($val, 1) * $scale list.nth($val, 2) * $scale;
}

@mixin scaledFontSize($val, $scale) {
  font-size: $val * $scale;
}

@mixin nested-submenu-indents($val, $index, $length) {
  .p-submenu-list {
    .p-menuitem {
      .p-menuitem-content {
        .p-menuitem-link {
          padding-left: $val * ($index + 1);
        }
      }
      @if $index < $length {
        @include nested-submenu-indents($val, $index + 2, $length);
      }
    }
  }
}

@mixin action-icon($enabled: true) {
  width: variables_light.$actionIconWidth;
  height: variables_light.$actionIconHeight;
  color: variables_light.$actionIconColor;
  border: variables_light.$actionIconBorder;
  background: variables_light.$actionIconBg;
  border-radius: variables_light.$actionIconBorderRadius;
  transition: variables_light.$actionIconTransition;
  outline-color: transparent;

  @if $enabled {
    &:enabled:hover {
      @include action-icon-hover();
    }
  } @else {
    &:hover {
      @include action-icon-hover();
    }
  }

  &:focus-visible {
    @include focused();
  }
}

@mixin action-icon-hover() {
  color: variables_light.$actionIconHoverColor;
  border-color: variables_light.$actionIconHoverBorderColor;
  background: variables_light.$actionIconHoverBg;
}

@mixin button-states {
  // <button> and <a> tags support :enabled selector.

  &:enabled,
  &:not(button):not(a):not(.p-disabled) {
    @content;
  }
}

@function tint($color, $percentage) {
  @return color.mix(#fff, $color, $percentage);
}

@function shade($color, $percentage) {
  @return color.mix(#000, $color, $percentage);
}
