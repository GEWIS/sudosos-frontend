@use 'sass:list';
@use '../../../themes/sudosos-light/variables_light';
@use '../../../themes/variables';
@use '../../mixins';

@use 'sass:math';

// core
.p-autocomplete {
  display: inline-flex;
}

.p-autocomplete-loader {
  position: absolute;
  top: 50%;
  margin-top: -0.5rem;
}

.p-autocomplete-dd .p-autocomplete-input {
  flex: 1 1 auto;
  width: 1%;
}

.p-autocomplete-dd .p-autocomplete-input,
.p-autocomplete-dd .p-autocomplete-multiple-container {
  border-top-right-radius: 0;
  border-bottom-right-radius: 0;
}

.p-autocomplete-dd .p-autocomplete-dropdown {
  border-top-left-radius: 0;
  border-bottom-left-radius: 0px;
}

.p-autocomplete .p-autocomplete-panel {
  min-width: 100%;
}

.p-autocomplete-panel {
  position: absolute;
  overflow: auto;
  top: 0;
  left: 0;
}

.p-autocomplete-items {
  margin: 0;
  padding: 0;
  list-style-type: none;
}

.p-autocomplete-item {
  cursor: pointer;
  white-space: nowrap;
  position: relative;
  overflow: hidden;
}

.p-autocomplete-multiple-container {
  margin: 0;
  padding: 0;
  list-style-type: none;
  cursor: text;
  overflow: hidden;
  display: flex;
  align-items: center;
  flex-wrap: wrap;
}

.p-autocomplete-token {
  cursor: default;
  display: inline-flex;
  align-items: center;
  flex: 0 0 auto;
}

.p-autocomplete-token-icon {
  cursor: pointer;
}

.p-autocomplete-input-token {
  flex: 1 1 auto;
  display: inline-flex;
}

.p-autocomplete-input-token input {
  border: 0 none;
  outline: 0 none;
  background-color: transparent;
  margin: 0;
  padding: 0;
  box-shadow: none;
  border-radius: 0;
  width: 100%;
}

.p-fluid .p-autocomplete {
  display: flex;
}

.p-fluid .p-autocomplete-dd .p-autocomplete-input {
  width: 1%;
}

// theme
.p-autocomplete {
  .p-autocomplete-loader {
    right: list.nth(variables_light.$inputPadding, 2);
  }

  &.p-autocomplete-dd {
    .p-autocomplete-loader {
      right: list.nth(variables_light.$inputPadding, 2) + variables_light.$buttonIconOnlyWidth;
    }
  }

  &:not(.p-disabled):hover {
    .p-autocomplete-multiple-container {
      border-color: variables_light.$inputHoverBorderColor;
    }
  }

  &:not(.p-disabled).p-focus {
    .p-autocomplete-multiple-container {
      @include mixins.focused-input();
    }
  }

  .p-autocomplete-multiple-container {
    padding: math.div(list.nth(variables_light.$inputPadding, 1), 2) list.nth(variables_light.$inputPadding, 2);
    gap: variables_light.$inlineSpacing;
    outline-color: transparent;

    .p-autocomplete-input-token {
      padding: math.div(list.nth(variables_light.$inputPadding, 1), 2) 0;

      input {
        font-family: var(--font-family);
        font-feature-settings: var(--font-feature-settings, normal);
        font-size: variables_light.$inputTextFontSize;
        color: variables_light.$textColor;
        padding: 0;
        margin: 0;
      }
    }

    .p-autocomplete-token {
      padding: math.div(list.nth(variables_light.$inputPadding, 1), 2) list.nth(variables_light.$inputPadding, 2);
      background: variables_light.$chipBg;
      color: variables_light.$chipTextColor;
      border-radius: variables_light.$chipBorderRadius;

      .p-autocomplete-token-icon {
        margin-left: variables_light.$inlineSpacing;
      }

      &.p-focus {
        background: variables_light.$chipFocusBg;
        color: variables_light.$chipFocusTextColor;
      }
    }
  }

  &.p-invalid.p-component > .p-inputtext {
    @include mixins.invalid-input();
  }
}

.p-autocomplete-panel {
  background: variables_light.$inputOverlayBg;
  color: variables_light.$inputListTextColor;
  border: variables_light.$inputOverlayBorder;
  border-radius: variables_light.$borderRadius;
  box-shadow: variables_light.$inputOverlayShadow;

  .p-autocomplete-items {
    padding: variables_light.$inputListPadding;

    .p-autocomplete-item {
      margin: variables_light.$inputListItemMargin;
      padding: variables_light.$inputListItemPadding;
      border: variables_light.$inputListItemBorder;
      color: variables_light.$inputListItemTextColor;
      background: variables_light.$inputListItemBg;
      transition: variables_light.$listItemTransition;
      border-radius: variables_light.$inputListItemBorderRadius;

      &:first-child {
        margin-top: 0;
      }

      &:last-child {
        margin-bottom: 0;
      }

      &.p-highlight {
        color: variables.$highlightTextColor;
        background: variables.$highlightBg;

        &.p-focus {
          background: variables.$highlightFocusBg;
        }
      }

      &:not(.p-highlight):not(.p-disabled) {
        &.p-focus {
          color: variables_light.$inputListItemTextHoverColor;
          background: variables_light.$inputListItemHoverBg;
        }
      }
    }

    .p-autocomplete-item-group {
      margin: variables_light.$submenuHeaderMargin;
      padding: variables_light.$submenuHeaderPadding;
      color: variables_light.$submenuHeaderTextColor;
      background: variables_light.$submenuHeaderBg;
      font-weight: variables_light.$submenuHeaderFontWeight;
    }
  }
}
